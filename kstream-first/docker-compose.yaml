version: '3.7'
services:
  kafka:
    #image: cp.icr.io/cp/ibm-eventstreams-kafka:10.5.0
    image: quay.io/strimzi/kafka:0.28.0-kafka-3.1.0
    container_name: kafka
    hostname: kafka
    command: [
      "sh", "-c",
      "./bin/kafka-storage.sh format -t $$(./bin/kafka-storage.sh random-uuid) -c ./config/kraft/server.properties && \
        bin/kafka-server-start.sh ./config/kraft/server.properties \
        --override node.id=$${KAFKA_BROKER_ID} \
        --override listeners=$${KAFKA_LISTENERS} \
        --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} \
        --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} \
        --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME}"
    ]
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://localhost:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: /tmp/logs
      KAFKA_BROKER_ID: 1
     
  addTopics:
    image:  quay.io/strimzi/kafka:0.28.0-kafka-3.1.0
    depends_on:
      - kafka
    entrypoint: [ "bash",  "-c", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --if-not-exists --replication-factor 1 --partitions 1 --topic TextLinesTopic 
            && /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --create  --if-not-exists --replication-factor 1 --partitions 1 --topic WordsWithCountsTopic"]
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

